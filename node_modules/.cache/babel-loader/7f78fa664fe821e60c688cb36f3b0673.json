{"ast":null,"code":"import { useField, useForm } from 'vee-validate';\nimport { useStore } from 'vuex';\nimport { getPrettyDate } from '@/helpers';\nexport default function (setValues) {\n  const store = useStore();\n  const params = new URLSearchParams(window.location.search);\n  let id = params.get('id');\n  if (typeof id !== 'string') return 0;\n  if (!/^[0-9]+$/g.test(id)) return 0; //useField('uploadedFiles');\n\n  show();\n  return id;\n\n  function getName(src) {\n    return src.substr(src.lastIndexOf('/') + 1);\n  }\n\n  async function getFile(fileId) {\n    try {\n      const {\n        file\n      } = await store.dispatch('complexForm/showFiles', {\n        fileId\n      });\n      return getName(file.src);\n    } catch (e) {\n      console.log(e);\n      return undefined;\n    }\n  }\n\n  async function upload(fileList) {\n    const idFilter = id => id !== 0;\n\n    const names = await Promise.all(fileList.filter(idFilter).map(getFile));\n    return names.filter(name => name !== undefined);\n  }\n\n  async function uploadDocuments(documents) {\n    const filledDocs = Object.entries(documents).filter(([_key, fileList]) => fileList.length > 0);\n    const uploadedDocs = await Promise.all(filledDocs.map(async ([key, fileList]) => {\n      const names = await upload(fileList);\n      return [key, names];\n    }));\n    const mocks = uploadedDocs.map(([key]) => {\n      return [key, null];\n    });\n    const docMocks = Object.fromEntries(mocks);\n    const docNames = Object.fromEntries(uploadedDocs);\n    return {\n      docMocks,\n      docNames\n    };\n  }\n\n  async function uploadAttached(attached) {\n    if (!attached) return null;\n    const attachedNames = await upload(attached);\n    return attachedNames;\n  }\n\n  function converToDate(timestamp) {\n    return new Date(timestamp * 1000);\n  }\n\n  function isDateFormat(value) {\n    const pattern = /^\\d{2}\\.\\d{2}\\.\\d{4}$/i;\n    return pattern.test(value);\n  }\n\n  function displayDate(timestamp) {\n    if (!timestamp) return '';\n    if (isDateFormat(timestamp)) return timestamp;\n    timestamp = +timestamp;\n    if (isNaN(timestamp) || timestamp === -1) return '';\n    return getPrettyDate(converToDate(timestamp)).value;\n  }\n\n  function replaceDates(formParts) {\n    const {\n      primary_information,\n      object_data\n    } = formParts;\n\n    if (primary_information.tu_date) {\n      primary_information.tu_date = displayDate(primary_information.tu_date);\n    }\n\n    if (object_data.commissioning_date) {\n      object_data.commissioning_date = displayDate(object_data.commissioning_date);\n    }\n\n    if (object_data.approximate_date) {\n      object_data.approximate_date = displayDate(object_data.approximate_date);\n    }\n\n    if (object_data.object_stages && Array.isArray(object_data.object_stages)) {\n      object_data.object_stages = object_data.object_stages.map(({\n        design_time,\n        input_date\n      }) => ({\n        design_time: displayDate(design_time),\n        input_date: displayDate(input_date)\n      }));\n    }\n  }\n\n  async function show() {\n    try {\n      const {\n        request: {\n          data,\n          files,\n          comment\n        }\n      } = await store.dispatch('complexForm/show', {\n        id: +id\n      });\n      let filesData = '';\n\n      if (files.length > 0) {\n        filesData = await store.dispatch('complexForm/getFilesData', {\n          file: files\n        });\n      }\n\n      const values = { ...data,\n        comment,\n        files: filesData,\n        uploaded_files: files.length > 0 ? files.join() : '' // Для скрытого поля uploaded_files в который передаются ID шники уже загруженных файлов заявки\n\n      };\n      setValues(values);\n    } catch (e) {\n      console.log(e);\n      alert('не удалось загрузить данные формы');\n    }\n  }\n}","map":{"version":3,"sources":["C:/projects/gazprom/formApplication/src/compositions/usePreloadForm.js"],"names":["useField","useForm","useStore","getPrettyDate","setValues","store","params","URLSearchParams","window","location","search","id","get","test","show","getName","src","substr","lastIndexOf","getFile","fileId","file","dispatch","e","console","log","undefined","upload","fileList","idFilter","names","Promise","all","filter","map","name","uploadDocuments","documents","filledDocs","Object","entries","_key","length","uploadedDocs","key","mocks","docMocks","fromEntries","docNames","uploadAttached","attached","attachedNames","converToDate","timestamp","Date","isDateFormat","value","pattern","displayDate","isNaN","replaceDates","formParts","primary_information","object_data","tu_date","commissioning_date","approximate_date","object_stages","Array","isArray","design_time","input_date","request","data","files","comment","filesData","values","uploaded_files","join","alert"],"mappings":"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","sourcesContent":["import { useField, useForm } from 'vee-validate';\nimport { useStore } from 'vuex';\nimport { getPrettyDate } from '@/helpers';\n\nexport default function (setValues) {\n  const store = useStore();\n  const params = new URLSearchParams(window.location.search);\n  let id = params.get('id');\n  if (typeof id !== 'string') return 0;\n  if (!/^[0-9]+$/g.test(id)) return 0;\n\n  //useField('uploadedFiles');\n\n  show();\n\n  return id;\n\n  function getName(src) {\n    return src.substr(src.lastIndexOf('/') + 1);\n  }\n\n  async function getFile(fileId) {\n    try {\n      const { file } = await store.dispatch('complexForm/showFiles', { fileId });\n      return getName(file.src);\n    } catch(e) {\n      console.log(e);\n      return undefined;\n    }\n  }\n\n  async function upload(fileList) {\n    const idFilter = id => id !== 0;\n    const names = await Promise.all(fileList.filter(idFilter).map(getFile));\n    return names.filter(name => name !== undefined);\n  }\n\n  async function uploadDocuments(documents) {\n    const filledDocs = Object.entries(documents).filter(([_key, fileList]) => fileList.length > 0);\n    const uploadedDocs = await Promise.all(\n      filledDocs.map(async ([key, fileList]) => {\n        const names = await upload(fileList);\n        return [key, names];\n      })\n    );\n\n    const mocks = uploadedDocs.map(([key]) => {\n      return [key, null]\n    });\n\n    const docMocks = Object.fromEntries(mocks);\n    const docNames = Object.fromEntries(uploadedDocs);\n\n    return {\n      docMocks,\n      docNames\n    }\n  }\n\n  async function uploadAttached(attached) {\n    if(!attached) return null;\n    const attachedNames = await upload(attached);\n    return attachedNames;\n  }\n\n  function converToDate(timestamp) {\n    return new Date(timestamp * 1000);\n  }\n\n  function isDateFormat(value) {\n    const pattern = /^\\d{2}\\.\\d{2}\\.\\d{4}$/i;\n    return pattern.test(value);\n  }\n\n  function displayDate(timestamp) {\n    if(!timestamp) return '';\n    if(isDateFormat(timestamp)) return timestamp;\n\n    timestamp = +timestamp;\n    if(isNaN(timestamp) || timestamp === -1) return '';\n    return getPrettyDate(converToDate(timestamp)).value\n  }\n\n  function replaceDates(formParts) {\n    const { primary_information, object_data } = formParts;\n\n    if(primary_information.tu_date) {\n      primary_information.tu_date = displayDate(primary_information.tu_date)\n    }\n\n    if(object_data.commissioning_date) {\n      object_data.commissioning_date = displayDate(object_data.commissioning_date);\n    }\n\n    if(object_data.approximate_date) {\n      object_data.approximate_date = displayDate(object_data.approximate_date);\n    }\n\n    if(object_data.object_stages && Array.isArray(object_data.object_stages)) {\n      object_data.object_stages = object_data.object_stages.map(({ design_time, input_date }) => ({\n        design_time: displayDate(design_time),\n        input_date: displayDate(input_date)\n      }))\n    }\n  }\n\n  async function show() {\n    try {\n      const { request: { data, files, comment } } = await store.dispatch('complexForm/show', { id: +id });\n\n      let filesData = ''\n\n      if (files.length > 0) {\n        filesData = await store.dispatch('complexForm/getFilesData', { file: files });\n      }\n\n      const values = {\n        ...data,\n        comment,\n        files: filesData,\n        uploaded_files: (files.length > 0) ? files.join() : ''  // Для скрытого поля uploaded_files в который передаются ID шники уже загруженных файлов заявки\n      };\n\n      setValues(values); \n\n\n    } catch(e) {\n      console.log(e);\n      alert('не удалось загрузить данные формы');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}