{"ast":null,"code":"import { Field, useField } from 'vee-validate';\nimport { ref, toRefs, computed } from 'vue';\nimport { throttle } from '@/utilities/perfomance';\nexport default {\n  inheritAttrs: false,\n  props: { ...Field.props,\n    fetcher: {\n      required: true,\n      type: Function\n    },\n    option: {\n      default() {\n        return option => option;\n      },\n\n      type: Function\n    }\n  },\n\n  setup(props) {\n    const showing = ref(false);\n    const options = ref([]);\n    const loading = ref(false);\n    const {\n      label,\n      rules,\n      name\n    } = toRefs(props);\n    const {\n      value,\n      handleChange\n    } = useField(name, rules, {\n      validateOnValueUpdate: false,\n      label\n    });\n    const {\n      value: current,\n      handleChange: selectChange\n    } = useField(computed(() => name.value + '-s'), '' // { standalone: true }\n    );\n    const opts = computed(() => {\n      return options.value.map(opt => ({ ...props.option(opt),\n        meta: opt\n      }));\n    });\n    const upload = throttle(async () => {\n      if (value.value === '') return;\n\n      try {\n        loading.value = true;\n\n        const loader = async () => props.fetcher(value.value);\n\n        options.value = await loader();\n      } catch (err) {\n        console.error(err);\n        alert('Произошла ошибка при загрузке данных!');\n      } finally {\n        loading.value = false;\n      }\n    }, 800);\n    return {\n      current,\n      opts,\n      loading,\n      value,\n      handleChange,\n      selectChange,\n      showing,\n\n      onClick(opt) {\n        handleChange(opt.value);\n        selectChange(opt.meta);\n        showing.value = false;\n      },\n\n      onInput(e) {\n        loading.value = true;\n        handleChange(e);\n        upload();\n      }\n\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAuDA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,cAAhC;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,QAAtB,QAAsC,KAAtC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,eAAe;AACbC,cAAY,EAAE,KADD;AAEbC,OAAK,EAAE,EACL,GAAGP,KAAK,CAACO,KADJ;AAELC,WAAO,EAAE;AACPC,cAAQ,EAAE,IADH;AAEPC,UAAI,EAAEC;AAFC,KAFJ;AAMLC,UAAM,EAAE;AACNC,aAAO,GAAG;AACR,eAAQD,MAAD,IAAYA,MAAnB;AACD,OAHK;;AAINF,UAAI,EAAEC;AAJA;AANH,GAFM;;AAebG,OAAK,CAACP,KAAD,EAAQ;AACX,UAAMQ,OAAM,GAAIb,GAAG,CAAC,KAAD,CAAnB;AACA,UAAMc,OAAM,GAAId,GAAG,CAAC,EAAD,CAAnB;AACA,UAAMe,OAAM,GAAIf,GAAG,CAAC,KAAD,CAAnB;AACA,UAAM;AAAEgB,WAAF;AAASC,WAAT;AAAgBC;AAAhB,QAAyBjB,MAAM,CAACI,KAAD,CAArC;AACA,UAAM;AAAEc,WAAF;AAASC;AAAT,QAA0BrB,QAAQ,CAACmB,IAAD,EAAOD,KAAP,EAAc;AACpDI,2BAAqB,EAAE,KAD6B;AAEpDL;AAFoD,KAAd,CAAxC;AAKA,UAAM;AAAEG,WAAK,EAAEG,OAAT;AAAkBF,kBAAY,EAAEG;AAAhC,QAAiDxB,QAAQ,CAC7DG,QAAQ,CAAC,MAAMgB,IAAI,CAACC,KAAL,GAAa,IAApB,CADqD,EAE7D,EAF6D,CAG7D;AAH6D,KAA/D;AAMA,UAAMK,IAAG,GAAItB,QAAQ,CAAC,MAAM;AAC1B,aAAOY,OAAO,CAACK,KAAR,CAAcM,GAAd,CAAmBC,GAAD,KAAU,EAAE,GAAGrB,KAAK,CAACK,MAAN,CAAagB,GAAb,CAAL;AAAwBC,YAAI,EAAED;AAA9B,OAAV,CAAlB,CAAP;AACD,KAFoB,CAArB;AAIA,UAAME,MAAK,GAAIzB,QAAQ,CAAC,YAAY;AAClC,UAAIgB,KAAK,CAACA,KAAN,KAAgB,EAApB,EAAwB;;AAExB,UAAI;AACFJ,eAAO,CAACI,KAAR,GAAgB,IAAhB;;AACA,cAAMU,MAAK,GAAI,YAAYxB,KAAK,CAACC,OAAN,CAAca,KAAK,CAACA,KAApB,CAA3B;;AACAL,eAAO,CAACK,KAAR,GAAgB,MAAMU,MAAM,EAA5B;AACF,OAJA,CAIE,OAAOC,GAAP,EAAY;AACZC,eAAO,CAACC,KAAR,CAAcF,GAAd;AACAG,aAAK,CAAC,uCAAD,CAAL;AACF,OAPA,SAOU;AACRlB,eAAO,CAACI,KAAR,GAAgB,KAAhB;AACF;AACD,KAbsB,EAapB,GAboB,CAAvB;AAeA,WAAO;AACLG,aADK;AAELE,UAFK;AAGLT,aAHK;AAILI,WAJK;AAKLC,kBALK;AAMLG,kBANK;AAOLV,aAPK;;AAQLqB,aAAO,CAACR,GAAD,EAAM;AACXN,oBAAY,CAACM,GAAG,CAACP,KAAL,CAAZ;AACAI,oBAAY,CAACG,GAAG,CAACC,IAAL,CAAZ;AACAd,eAAO,CAACM,KAAR,GAAgB,KAAhB;AACD,OAZI;;AAaLgB,aAAO,CAACC,CAAD,EAAI;AACTrB,eAAO,CAACI,KAAR,GAAgB,IAAhB;AACAC,oBAAY,CAACgB,CAAD,CAAZ;AACAR,cAAM;AACP;;AAjBI,KAAP;AAmBD;;AArEY,CAAf","names":["Field","useField","ref","toRefs","computed","throttle","inheritAttrs","props","fetcher","required","type","Function","option","default","setup","showing","options","loading","label","rules","name","value","handleChange","validateOnValueUpdate","current","selectChange","opts","map","opt","meta","upload","loader","err","console","error","alert","onClick","onInput","e"],"sourceRoot":"","sources":["C:\\projects\\gazprom\\formApplication\\src\\core\\AppFilterSelect.vue"],"sourcesContent":["<template>\n  <div class=\"tw-relative\">\n    <AppLabel v-bind=\"{ label, for: name }\" />\n    <input\n      v-bind=\"$attrs\"\n      autocomplete=\"off\"\n      class=\"app-input\"\n      :id=\"name\"\n      type=\"text\"\n      @focus=\"showing = true\"\n      @blur=\"showing = false\"\n      :value=\"value\"\n      @input=\"onInput\"\n    />\n    <AppErrorMessage v-bind=\"{ name }\" />\n    <div\n      v-if=\"showing\"\n      class=\"\n        tw-absolute\n        tw-w-full\n        tw-z-10\n        tw-border-b\n        tw-border-x\n        tw-border-gray-300\n        tw-rounded-b-lg\n        tw-max-h-44\n        tw-overflow-scroll\n      \"\n    >\n      <div class=\"tw-p-2 tw-bg-white\" v-if=\"value === ''\">\n        Начните вводить текст\n      </div>\n      <div\n        v-else-if=\"loading\"\n        class=\"tw-p-2 tw-bg-white hover:tw-bg-slate-300 tw-cursor-pointer\"\n      >\n        loading...\n      </div>\n      <template v-else>\n        <div class=\"tw-bg-white tw-p-2\" v-if=\"opts.length <= 0\">\n          Ничего не найдено\n        </div>\n        <div\n          v-for=\"(opt, i) in opts\"\n          :key=\"i\"\n          @click=\"onClick(opt)\"\n          class=\"tw-p-2 tw-bg-white hover:tw-bg-slate-300 tw-cursor-pointer\"\n        >\n          {{ opt.label }}\n        </div>\n      </template>\n    </div>\n  </div>\n</template>\n<script>\nimport { Field, useField } from 'vee-validate';\nimport { ref, toRefs, computed } from 'vue';\nimport { throttle } from '@/utilities/perfomance';\n\nexport default {\n  inheritAttrs: false,\n  props: {\n    ...Field.props,\n    fetcher: {\n      required: true,\n      type: Function,\n    },\n    option: {\n      default() {\n        return (option) => option;\n      },\n      type: Function,\n    },\n  },\n  setup(props) {\n    const showing = ref(false);\n    const options = ref([]);\n    const loading = ref(false);\n    const { label, rules, name } = toRefs(props);\n    const { value, handleChange } = useField(name, rules, {\n      validateOnValueUpdate: false,\n      label,\n    });\n\n    const { value: current, handleChange: selectChange } = useField(\n      computed(() => name.value + '-s'),\n      '',\n      // { standalone: true }\n    );\n\n    const opts = computed(() => {\n      return options.value.map((opt) => ({ ...props.option(opt), meta: opt }));\n    });\n\n    const upload = throttle(async () => {\n      if (value.value === '') return;\n\n      try {\n        loading.value = true;\n        const loader = async () => props.fetcher(value.value);\n        options.value = await loader();\n      } catch (err) {\n        console.error(err);\n        alert('Произошла ошибка при загрузке данных!');\n      } finally {\n        loading.value = false;\n      }\n    }, 800);\n\n    return {\n      current,\n      opts,\n      loading,\n      value,\n      handleChange,\n      selectChange,\n      showing,\n      onClick(opt) {\n        handleChange(opt.value);\n        selectChange(opt.meta);\n        showing.value = false;\n      },\n      onInput(e) {\n        loading.value = true;\n        handleChange(e);\n        upload();\n      },\n    };\n  },\n};\n</script>\n\n<style scoped>\n.app-input {\n  @apply tw-border tw-border-gray-400 tw-rounded-lg tw-h-8 tw-px-2 tw-block tw-w-full;\n}\n\n.app-input:hover,\n.app-input:focus {\n  @apply tw-border-primary;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}