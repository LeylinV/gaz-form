{"ast":null,"code":"import _objectSpread from \"C:/projects/gazprom/formApplication/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"C:/projects/gazprom/formApplication/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/projects/gazprom/formApplication/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.from-entries.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport { useField, useForm } from 'vee-validate';\nimport { useStore } from 'vuex';\nimport { getPrettyDate } from '@/helpers';\nexport default function (setValues) {\n  var store = useStore();\n  var params = new URLSearchParams(window.location.search);\n  var id = params.get('id');\n  if (typeof id !== 'string') return 0;\n  if (!/^[0-9]+$/g.test(id)) return 0; //useField('uploadedFiles');\n\n  show();\n  return id;\n\n  function getName(src) {\n    return src.substr(src.lastIndexOf('/') + 1);\n  }\n\n  function getFile(_x) {\n    return _getFile.apply(this, arguments);\n  }\n\n  function _getFile() {\n    _getFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(fileId) {\n      var _yield$store$dispatch, file;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return store.dispatch('complexForm/showFiles', {\n                fileId: fileId\n              });\n\n            case 3:\n              _yield$store$dispatch = _context.sent;\n              file = _yield$store$dispatch.file;\n              return _context.abrupt(\"return\", getName(file.src));\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              return _context.abrupt(\"return\", undefined);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n    return _getFile.apply(this, arguments);\n  }\n\n  function upload(_x2) {\n    return _upload.apply(this, arguments);\n  }\n\n  function _upload() {\n    _upload = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(fileList) {\n      var idFilter, names;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              idFilter = function idFilter(id) {\n                return id !== 0;\n              };\n\n              _context2.next = 3;\n              return Promise.all(fileList.filter(idFilter).map(getFile));\n\n            case 3:\n              names = _context2.sent;\n              return _context2.abrupt(\"return\", names.filter(function (name) {\n                return name !== undefined;\n              }));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _upload.apply(this, arguments);\n  }\n\n  function uploadDocuments(_x3) {\n    return _uploadDocuments.apply(this, arguments);\n  }\n\n  function _uploadDocuments() {\n    _uploadDocuments = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(documents) {\n      var filledDocs, uploadedDocs, mocks, docMocks, docNames;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              filledDocs = Object.entries(documents).filter(function (_ref2) {\n                var _ref3 = _slicedToArray(_ref2, 2),\n                    _key = _ref3[0],\n                    fileList = _ref3[1];\n\n                return fileList.length > 0;\n              });\n              _context4.next = 3;\n              return Promise.all(filledDocs.map( /*#__PURE__*/function () {\n                var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref4) {\n                  var _ref6, key, fileList, names;\n\n                  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _ref6 = _slicedToArray(_ref4, 2), key = _ref6[0], fileList = _ref6[1];\n                          _context3.next = 3;\n                          return upload(fileList);\n\n                        case 3:\n                          names = _context3.sent;\n                          return _context3.abrupt(\"return\", [key, names]);\n\n                        case 5:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x5) {\n                  return _ref5.apply(this, arguments);\n                };\n              }()));\n\n            case 3:\n              uploadedDocs = _context4.sent;\n              mocks = uploadedDocs.map(function (_ref7) {\n                var _ref8 = _slicedToArray(_ref7, 1),\n                    key = _ref8[0];\n\n                return [key, null];\n              });\n              docMocks = Object.fromEntries(mocks);\n              docNames = Object.fromEntries(uploadedDocs);\n              return _context4.abrupt(\"return\", {\n                docMocks: docMocks,\n                docNames: docNames\n              });\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _uploadDocuments.apply(this, arguments);\n  }\n\n  function uploadAttached(_x4) {\n    return _uploadAttached.apply(this, arguments);\n  }\n\n  function _uploadAttached() {\n    _uploadAttached = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(attached) {\n      var attachedNames;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (attached) {\n                _context5.next = 2;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", null);\n\n            case 2:\n              _context5.next = 4;\n              return upload(attached);\n\n            case 4:\n              attachedNames = _context5.sent;\n              return _context5.abrupt(\"return\", attachedNames);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _uploadAttached.apply(this, arguments);\n  }\n\n  function converToDate(timestamp) {\n    return new Date(timestamp * 1000);\n  }\n\n  function isDateFormat(value) {\n    var pattern = /^\\d{2}\\.\\d{2}\\.\\d{4}$/i;\n    return pattern.test(value);\n  }\n\n  function displayDate(timestamp) {\n    if (!timestamp) return '';\n    if (isDateFormat(timestamp)) return timestamp;\n    timestamp = +timestamp;\n    if (isNaN(timestamp) || timestamp === -1) return '';\n    return getPrettyDate(converToDate(timestamp)).value;\n  }\n\n  function replaceDates(formParts) {\n    var primary_information = formParts.primary_information,\n        object_data = formParts.object_data;\n\n    if (primary_information.tu_date) {\n      primary_information.tu_date = displayDate(primary_information.tu_date);\n    }\n\n    if (object_data.commissioning_date) {\n      object_data.commissioning_date = displayDate(object_data.commissioning_date);\n    }\n\n    if (object_data.approximate_date) {\n      object_data.approximate_date = displayDate(object_data.approximate_date);\n    }\n\n    if (object_data.object_stages && Array.isArray(object_data.object_stages)) {\n      object_data.object_stages = object_data.object_stages.map(function (_ref) {\n        var design_time = _ref.design_time,\n            input_date = _ref.input_date;\n        return {\n          design_time: displayDate(design_time),\n          input_date: displayDate(input_date)\n        };\n      });\n    }\n  }\n\n  function show() {\n    return _show.apply(this, arguments);\n  }\n\n  function _show() {\n    _show = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n      var _yield$store$dispatch2, _yield$store$dispatch3, data, files, comment, filesData, values;\n\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return store.dispatch('complexForm/show', {\n                id: +id\n              });\n\n            case 3:\n              _yield$store$dispatch2 = _context6.sent;\n              _yield$store$dispatch3 = _yield$store$dispatch2.request;\n              data = _yield$store$dispatch3.data;\n              files = _yield$store$dispatch3.files;\n              comment = _yield$store$dispatch3.comment;\n              filesData = '';\n\n              if (!(files.length > 0)) {\n                _context6.next = 13;\n                break;\n              }\n\n              _context6.next = 12;\n              return store.dispatch('complexForm/getFilesData', {\n                file: files\n              });\n\n            case 12:\n              filesData = _context6.sent;\n\n            case 13:\n              values = _objectSpread(_objectSpread({}, data), {}, {\n                comment: comment,\n                files: filesData,\n                uploaded_files: files.length > 0 ? files.join() : '' // Для скрытого поля uploaded_files в который передаются ID шники уже загруженных файлов заявки\n\n              });\n              setValues(values);\n              _context6.next = 21;\n              break;\n\n            case 17:\n              _context6.prev = 17;\n              _context6.t0 = _context6[\"catch\"](0);\n              console.log(_context6.t0);\n              alert('не удалось загрузить данные формы');\n\n            case 21:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 17]]);\n    }));\n    return _show.apply(this, arguments);\n  }\n}","map":{"version":3,"sources":["C:/projects/gazprom/formApplication/src/compositions/usePreloadForm.js"],"names":["useField","useForm","useStore","getPrettyDate","setValues","store","params","URLSearchParams","window","location","search","id","get","test","show","getName","src","substr","lastIndexOf","getFile","fileId","dispatch","file","console","log","undefined","upload","fileList","idFilter","Promise","all","filter","map","names","name","uploadDocuments","documents","filledDocs","Object","entries","_key","length","key","uploadedDocs","mocks","docMocks","fromEntries","docNames","uploadAttached","attached","attachedNames","converToDate","timestamp","Date","isDateFormat","value","pattern","displayDate","isNaN","replaceDates","formParts","primary_information","object_data","tu_date","commissioning_date","approximate_date","object_stages","Array","isArray","design_time","input_date","request","data","files","comment","filesData","values","uploaded_files","join","alert"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,cAAlC;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,eAAe,UAAUC,SAAV,EAAqB;AAClC,MAAMC,KAAK,GAAGH,QAAQ,EAAtB;AACA,MAAMI,MAAM,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAf;AACA,MAAIC,EAAE,GAAGL,MAAM,CAACM,GAAP,CAAW,IAAX,CAAT;AACA,MAAI,OAAOD,EAAP,KAAc,QAAlB,EAA4B,OAAO,CAAP;AAC5B,MAAI,CAAC,YAAYE,IAAZ,CAAiBF,EAAjB,CAAL,EAA2B,OAAO,CAAP,CALO,CAOlC;;AAEAG,EAAAA,IAAI;AAEJ,SAAOH,EAAP;;AAEA,WAASI,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,WAAOA,GAAG,CAACC,MAAJ,CAAWD,GAAG,CAACE,WAAJ,CAAgB,GAAhB,IAAuB,CAAlC,CAAP;AACD;;AAfiC,WAiBnBC,OAjBmB;AAAA;AAAA;;AAAA;AAAA,uEAiBlC,iBAAuBC,MAAvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAE2Bf,KAAK,CAACgB,QAAN,CAAe,uBAAf,EAAwC;AAAED,gBAAAA,MAAM,EAANA;AAAF,eAAxC,CAF3B;;AAAA;AAAA;AAEYE,cAAAA,IAFZ,yBAEYA,IAFZ;AAAA,+CAGWP,OAAO,CAACO,IAAI,CAACN,GAAN,CAHlB;;AAAA;AAAA;AAAA;AAKIO,cAAAA,OAAO,CAACC,GAAR;AALJ,+CAMWC,SANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjBkC;AAAA;AAAA;;AAAA,WA2BnBC,MA3BmB;AAAA;AAAA;;AAAA;AAAA,sEA2BlC,kBAAsBC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,cAAAA,QADR,GACmB,SAAXA,QAAW,CAAAjB,EAAE;AAAA,uBAAIA,EAAE,KAAK,CAAX;AAAA,eADrB;;AAAA;AAAA,qBAEsBkB,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,MAAT,CAAgBH,QAAhB,EAA0BI,GAA1B,CAA8Bb,OAA9B,CAAZ,CAFtB;;AAAA;AAEQc,cAAAA,KAFR;AAAA,gDAGSA,KAAK,CAACF,MAAN,CAAa,UAAAG,IAAI;AAAA,uBAAIA,IAAI,KAAKT,SAAb;AAAA,eAAjB,CAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3BkC;AAAA;AAAA;;AAAA,WAiCnBU,eAjCmB;AAAA;AAAA;;AAAA;AAAA,+EAiClC,kBAA+BC,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,cAAAA,UADR,GACqBC,MAAM,CAACC,OAAP,CAAeH,SAAf,EAA0BL,MAA1B,CAAiC;AAAA;AAAA,oBAAES,IAAF;AAAA,oBAAQb,QAAR;;AAAA,uBAAsBA,QAAQ,CAACc,MAAT,GAAkB,CAAxC;AAAA,eAAjC,CADrB;AAAA;AAAA,qBAE6BZ,OAAO,CAACC,GAAR,CACzBO,UAAU,CAACL,GAAX;AAAA,oFAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4DAAQU,GAAR,aAAaf,QAAb;AAAA;AAAA,iCACOD,MAAM,CAACC,QAAD,CADb;;AAAA;AACPM,0BAAAA,KADO;AAAA,4DAEN,CAACS,GAAD,EAAMT,KAAN,CAFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAf;;AAAA;AAAA;AAAA;AAAA,kBADyB,CAF7B;;AAAA;AAEQU,cAAAA,YAFR;AASQC,cAAAA,KATR,GASgBD,YAAY,CAACX,GAAb,CAAiB,iBAAW;AAAA;AAAA,oBAATU,GAAS;;AACxC,uBAAO,CAACA,GAAD,EAAM,IAAN,CAAP;AACD,eAFa,CAThB;AAaQG,cAAAA,QAbR,GAamBP,MAAM,CAACQ,WAAP,CAAmBF,KAAnB,CAbnB;AAcQG,cAAAA,QAdR,GAcmBT,MAAM,CAACQ,WAAP,CAAmBH,YAAnB,CAdnB;AAAA,gDAgBS;AACLE,gBAAAA,QAAQ,EAARA,QADK;AAELE,gBAAAA,QAAQ,EAARA;AAFK,eAhBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjCkC;AAAA;AAAA;;AAAA,WAuDnBC,cAvDmB;AAAA;AAAA;;AAAA;AAAA,8EAuDlC,kBAA8BC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACMA,QADN;AAAA;AAAA;AAAA;;AAAA,gDACuB,IADvB;;AAAA;AAAA;AAAA,qBAE8BvB,MAAM,CAACuB,QAAD,CAFpC;;AAAA;AAEQC,cAAAA,aAFR;AAAA,gDAGSA,aAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvDkC;AAAA;AAAA;;AA6DlC,WAASC,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B,WAAO,IAAIC,IAAJ,CAASD,SAAS,GAAG,IAArB,CAAP;AACD;;AAED,WAASE,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAMC,OAAO,GAAG,wBAAhB;AACA,WAAOA,OAAO,CAAC3C,IAAR,CAAa0C,KAAb,CAAP;AACD;;AAED,WAASE,WAAT,CAAqBL,SAArB,EAAgC;AAC9B,QAAG,CAACA,SAAJ,EAAe,OAAO,EAAP;AACf,QAAGE,YAAY,CAACF,SAAD,CAAf,EAA4B,OAAOA,SAAP;AAE5BA,IAAAA,SAAS,GAAG,CAACA,SAAb;AACA,QAAGM,KAAK,CAACN,SAAD,CAAL,IAAoBA,SAAS,KAAK,CAAC,CAAtC,EAAyC,OAAO,EAAP;AACzC,WAAOjD,aAAa,CAACgD,YAAY,CAACC,SAAD,CAAb,CAAb,CAAuCG,KAA9C;AACD;;AAED,WAASI,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B,QAAQC,mBAAR,GAA6CD,SAA7C,CAAQC,mBAAR;AAAA,QAA6BC,WAA7B,GAA6CF,SAA7C,CAA6BE,WAA7B;;AAEA,QAAGD,mBAAmB,CAACE,OAAvB,EAAgC;AAC9BF,MAAAA,mBAAmB,CAACE,OAApB,GAA8BN,WAAW,CAACI,mBAAmB,CAACE,OAArB,CAAzC;AACD;;AAED,QAAGD,WAAW,CAACE,kBAAf,EAAmC;AACjCF,MAAAA,WAAW,CAACE,kBAAZ,GAAiCP,WAAW,CAACK,WAAW,CAACE,kBAAb,CAA5C;AACD;;AAED,QAAGF,WAAW,CAACG,gBAAf,EAAiC;AAC/BH,MAAAA,WAAW,CAACG,gBAAZ,GAA+BR,WAAW,CAACK,WAAW,CAACG,gBAAb,CAA1C;AACD;;AAED,QAAGH,WAAW,CAACI,aAAZ,IAA6BC,KAAK,CAACC,OAAN,CAAcN,WAAW,CAACI,aAA1B,CAAhC,EAA0E;AACxEJ,MAAAA,WAAW,CAACI,aAAZ,GAA4BJ,WAAW,CAACI,aAAZ,CAA0BlC,GAA1B,CAA8B;AAAA,YAAGqC,WAAH,QAAGA,WAAH;AAAA,YAAgBC,UAAhB,QAAgBA,UAAhB;AAAA,eAAkC;AAC1FD,UAAAA,WAAW,EAAEZ,WAAW,CAACY,WAAD,CADkE;AAE1FC,UAAAA,UAAU,EAAEb,WAAW,CAACa,UAAD;AAFmE,SAAlC;AAAA,OAA9B,CAA5B;AAID;AACF;;AApGiC,WAsGnBxD,IAtGmB;AAAA;AAAA;;AAAA;AAAA,oEAsGlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEwDT,KAAK,CAACgB,QAAN,CAAe,kBAAf,EAAmC;AAAEV,gBAAAA,EAAE,EAAE,CAACA;AAAP,eAAnC,CAFxD;;AAAA;AAAA;AAAA,8DAEY4D,OAFZ;AAEuBC,cAAAA,IAFvB,0BAEuBA,IAFvB;AAE6BC,cAAAA,KAF7B,0BAE6BA,KAF7B;AAEoCC,cAAAA,OAFpC,0BAEoCA,OAFpC;AAIQC,cAAAA,SAJR,GAIoB,EAJpB;;AAAA,oBAMQF,KAAK,CAAChC,MAAN,GAAe,CANvB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAOwBpC,KAAK,CAACgB,QAAN,CAAe,0BAAf,EAA2C;AAAEC,gBAAAA,IAAI,EAAEmD;AAAR,eAA3C,CAPxB;;AAAA;AAOME,cAAAA,SAPN;;AAAA;AAUUC,cAAAA,MAVV,mCAWSJ,IAXT;AAYME,gBAAAA,OAAO,EAAPA,OAZN;AAaMD,gBAAAA,KAAK,EAAEE,SAbb;AAcME,gBAAAA,cAAc,EAAGJ,KAAK,CAAChC,MAAN,GAAe,CAAhB,GAAqBgC,KAAK,CAACK,IAAN,EAArB,GAAoC,EAd1D,CAc8D;;AAd9D;AAiBI1E,cAAAA,SAAS,CAACwE,MAAD,CAAT;AAjBJ;AAAA;;AAAA;AAAA;AAAA;AAqBIrD,cAAAA,OAAO,CAACC,GAAR;AACAuD,cAAAA,KAAK,CAAC,mCAAD,CAAL;;AAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtGkC;AAAA;AAAA;AA+HnC","sourcesContent":["import { useField, useForm } from 'vee-validate';\nimport { useStore } from 'vuex';\nimport { getPrettyDate } from '@/helpers';\n\nexport default function (setValues) {\n  const store = useStore();\n  const params = new URLSearchParams(window.location.search);\n  let id = params.get('id');\n  if (typeof id !== 'string') return 0;\n  if (!/^[0-9]+$/g.test(id)) return 0;\n\n  //useField('uploadedFiles');\n\n  show();\n\n  return id;\n\n  function getName(src) {\n    return src.substr(src.lastIndexOf('/') + 1);\n  }\n\n  async function getFile(fileId) {\n    try {\n      const { file } = await store.dispatch('complexForm/showFiles', { fileId });\n      return getName(file.src);\n    } catch(e) {\n      console.log(e);\n      return undefined;\n    }\n  }\n\n  async function upload(fileList) {\n    const idFilter = id => id !== 0;\n    const names = await Promise.all(fileList.filter(idFilter).map(getFile));\n    return names.filter(name => name !== undefined);\n  }\n\n  async function uploadDocuments(documents) {\n    const filledDocs = Object.entries(documents).filter(([_key, fileList]) => fileList.length > 0);\n    const uploadedDocs = await Promise.all(\n      filledDocs.map(async ([key, fileList]) => {\n        const names = await upload(fileList);\n        return [key, names];\n      })\n    );\n\n    const mocks = uploadedDocs.map(([key]) => {\n      return [key, null]\n    });\n\n    const docMocks = Object.fromEntries(mocks);\n    const docNames = Object.fromEntries(uploadedDocs);\n\n    return {\n      docMocks,\n      docNames\n    }\n  }\n\n  async function uploadAttached(attached) {\n    if(!attached) return null;\n    const attachedNames = await upload(attached);\n    return attachedNames;\n  }\n\n  function converToDate(timestamp) {\n    return new Date(timestamp * 1000);\n  }\n\n  function isDateFormat(value) {\n    const pattern = /^\\d{2}\\.\\d{2}\\.\\d{4}$/i;\n    return pattern.test(value);\n  }\n\n  function displayDate(timestamp) {\n    if(!timestamp) return '';\n    if(isDateFormat(timestamp)) return timestamp;\n\n    timestamp = +timestamp;\n    if(isNaN(timestamp) || timestamp === -1) return '';\n    return getPrettyDate(converToDate(timestamp)).value\n  }\n\n  function replaceDates(formParts) {\n    const { primary_information, object_data } = formParts;\n\n    if(primary_information.tu_date) {\n      primary_information.tu_date = displayDate(primary_information.tu_date)\n    }\n\n    if(object_data.commissioning_date) {\n      object_data.commissioning_date = displayDate(object_data.commissioning_date);\n    }\n\n    if(object_data.approximate_date) {\n      object_data.approximate_date = displayDate(object_data.approximate_date);\n    }\n\n    if(object_data.object_stages && Array.isArray(object_data.object_stages)) {\n      object_data.object_stages = object_data.object_stages.map(({ design_time, input_date }) => ({\n        design_time: displayDate(design_time),\n        input_date: displayDate(input_date)\n      }))\n    }\n  }\n\n  async function show() {\n    try {\n      const { request: { data, files, comment } } = await store.dispatch('complexForm/show', { id: +id });\n\n      let filesData = ''\n\n      if (files.length > 0) {\n        filesData = await store.dispatch('complexForm/getFilesData', { file: files });\n      }\n\n      const values = {\n        ...data,\n        comment,\n        files: filesData,\n        uploaded_files: (files.length > 0) ? files.join() : ''  // Для скрытого поля uploaded_files в который передаются ID шники уже загруженных файлов заявки\n      };\n\n      setValues(values); \n\n\n    } catch(e) {\n      console.log(e);\n      alert('не удалось загрузить данные формы');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}