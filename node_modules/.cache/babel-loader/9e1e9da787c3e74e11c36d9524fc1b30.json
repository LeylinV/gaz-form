{"ast":null,"code":"import flatten from 'flat';\nimport useEmail from '@/compositions/useEmail';\nimport useUserData from '@/compositions/useUserData';\nimport useAddress from '@/compositions/useAddress';\nimport usePreloadForm from '@/compositions/usePreloadForm';\nimport { useForm } from 'vee-validate';\nimport { useStore } from 'vuex';\nimport { nextTick, ref } from 'vue';\nimport usePasteAddress from './usePasteAddress';\n\nfunction scrollToFirstError(errors) {\n  const errList = Object.keys(errors);\n  if (errList.length <= 0) return;\n  const el = document.getElementById(errList[0]);\n  const elToScroll = el.parentElement.previousSibling;\n  if (!elToScroll) return;\n  elToScroll.scrollIntoView({\n    behavior: 'smooth'\n  });\n}\n\nexport default function (initialValues = {}, {\n  social = false\n} = {}) {\n  const loading = ref(false);\n  const submitModal = ref(false);\n  const store = useStore();\n  const {\n    values,\n    validate,\n    setErrors,\n    resetForm,\n    setFieldValue,\n    setValues\n  } = useForm();\n  nextTick(() => resetForm({\n    values: initialValues\n  }));\n  const id = usePreloadForm(setValues); //usePasteAddress(() => values.personal_data.mailing_address, setFieldValue);\n\n  const {\n    getUserData\n  } = useUserData();\n\n  const handleUserData = userdata => {\n    for (const [key, value] of Object.entries(userdata)) {\n      if (value.length > 0) {\n        setFieldValue(key, value);\n      }\n    }\n  }; // Если в режиме редактирования заявки, то не делаем запрос к данным пользователя, поскольку используем уже введенные данные\n\n\n  if (id <= 0) {\n    getUserData(handleUserData);\n  }\n\n  const {\n    getAccountAddress\n  } = useAddress();\n\n  const handleAddress = accountID => {\n    const handleAccountAddress = address => {\n      setFieldValue(\"address\", address);\n    };\n\n    if (accountID > 0) {\n      getAccountAddress(handleAccountAddress, accountID);\n    } else {\n      setFieldValue(\"address\", \"\");\n    }\n  };\n\n  const handleDateInterval = (name, value) => {\n    setFieldValue(name, value);\n  };\n\n  const handleResponse = data => {\n    if (!Array.isArray(data.errors)) {\n      const errors = flatten(data.errors);\n      setErrors(errors);\n      scrollToFirstError(errors);\n    } else {\n      submitModal.value = false;\n      console.log('данные ответа', data);\n      alert('Форма успешно отправлена');\n      let postfix = '';\n      if (+data?.post?.is_letter === 1) postfix = `${data.id}/edit/?id=${data.id}&letter=true`; //Раскоментировать!\n\n      if (social) location.href = '/contract/requests/' + postfix;else location.href = '/contract/requests/' + postfix;\n    }\n  };\n\n  const handleValidForm = async () => {\n    const {\n      errors,\n      valid\n    } = await validate();\n    if (!valid) return scrollToFirstError(errors);\n    submitModal.value = true;\n  };\n\n  const onSubmit = async (opts = {}) => {\n    const {\n      is_draft = 0,\n      is_sign = 0,\n      request_id = 0\n    } = opts;\n    submitModal.value = false;\n\n    if (is_draft === 0) {\n      const {\n        errors,\n        valid\n      } = await validate();\n      if (!valid) return scrollToFirstError(errors);\n    }\n\n    loading.value = true;\n    const data = await store.dispatch('complexForm/create', {\n      id,\n      edit: id >= 0 ? true : false,\n      social,\n      data: values,\n      meta: {\n        is_draft,\n        is_sign,\n        request_id\n      }\n    });\n    handleResponse(data);\n    loading.value = false;\n  };\n\n  return {\n    onSubmit,\n    submitModal,\n    loading,\n    handleValidForm,\n    handleAddress,\n    handleDateInterval\n  };\n}","map":{"version":3,"sources":["C:/projects/gazprom/formApplication/src/compositions/useComplexForm.js"],"names":["flatten","useEmail","useUserData","useAddress","usePreloadForm","useForm","useStore","nextTick","ref","usePasteAddress","scrollToFirstError","errors","errList","Object","keys","length","el","document","getElementById","elToScroll","parentElement","previousSibling","scrollIntoView","behavior","initialValues","social","loading","submitModal","store","values","validate","setErrors","resetForm","setFieldValue","setValues","id","getUserData","handleUserData","userdata","key","value","entries","getAccountAddress","handleAddress","accountID","handleAccountAddress","address","handleDateInterval","name","handleResponse","data","Array","isArray","console","log","alert","postfix","post","is_letter","location","href","handleValidForm","valid","onSubmit","opts","is_draft","is_sign","request_id","dispatch","edit","meta"],"mappings":"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","sourcesContent":["import flatten from 'flat';\nimport useEmail from '@/compositions/useEmail';\nimport useUserData from '@/compositions/useUserData';\nimport useAddress from '@/compositions/useAddress';\nimport usePreloadForm from '@/compositions/usePreloadForm';\nimport { useForm } from 'vee-validate';\nimport { useStore } from 'vuex';\nimport { nextTick, ref } from 'vue';\nimport usePasteAddress from './usePasteAddress';\n\nfunction scrollToFirstError(errors) {\n  const errList = Object.keys(errors);\n\n  if (errList.length <= 0) return;\n  const el = document.getElementById(errList[0]);\n\n  const elToScroll = el.parentElement.previousSibling;\n\n  if (!elToScroll) return;\n  elToScroll.scrollIntoView({ behavior: 'smooth' });\n}\n\nexport default function (initialValues = {}, { social = false } = {}) {\n  const loading = ref(false);\n  const submitModal = ref(false);\n  const store = useStore();\n\n  const { values, validate, setErrors, resetForm, setFieldValue, setValues } = useForm();\n\n  nextTick(() => resetForm({ values: initialValues }));\n\n  const id = usePreloadForm(setValues);\n\n  //usePasteAddress(() => values.personal_data.mailing_address, setFieldValue);\n\n\n  const { getUserData } = useUserData();\n  const handleUserData = (userdata) => {\n    for (const [key, value] of Object.entries(userdata)) {\n      if (value.length > 0) {\n        setFieldValue(key, value);\n      }\n    }\n  }\n\n  // Если в режиме редактирования заявки, то не делаем запрос к данным пользователя, поскольку используем уже введенные данные\n  if (id <= 0) {\n    getUserData(handleUserData);\n  }\n\n  const { getAccountAddress } = useAddress();\n  const handleAddress = (accountID) => {\n    const handleAccountAddress = (address) => {\n      setFieldValue(\"address\", address);\n    }\n    if (accountID > 0) {\n      getAccountAddress(handleAccountAddress, accountID);\n    } else {\n      setFieldValue(\"address\", \"\");\n    }\n  }\n\n  const handleDateInterval = (name, value) => {\n    setFieldValue(name, value)\n  }\n\n  const handleResponse = (data) => {\n    if (!Array.isArray(data.errors)) {\n      const errors = flatten(data.errors);\n      setErrors(errors);\n      scrollToFirstError(errors);\n    } else {\n      submitModal.value = false;\n      console.log('данные ответа', data);\n      alert('Форма успешно отправлена');\n\n      let postfix = '';\n      if(+data?.post?.is_letter === 1) postfix = `${data.id}/edit/?id=${data.id}&letter=true`;\n\n      //Раскоментировать!\n      if(social) location.href = '/contract/requests/' + postfix;\n      else location.href = '/contract/requests/' + postfix;\n    }\n  };\n\n  const handleValidForm = async () => {\n    const { errors, valid } = await validate();\n\n    if (!valid) return scrollToFirstError(errors);\n\n    submitModal.value = true;\n\n  }\n\n  const onSubmit = async (opts = {}) => {\n    const { is_draft = 0, is_sign = 0, request_id = 0 } = opts;\n\n    submitModal.value = false;\n\n    if (is_draft === 0) {\n      const { errors, valid } = await validate();\n      if (!valid) return scrollToFirstError(errors);\n    }\n\n    loading.value = true;\n\n    const data = await store.dispatch('complexForm/create', {\n      id,\n      edit: id >= 0 ? true : false,\n      social,\n      data: values,\n      meta: { is_draft, is_sign, request_id },\n    });\n\n    handleResponse(data);\n\n    loading.value = false;\n  };\n\n  return {\n    onSubmit,\n    submitModal,\n    loading,\n    handleValidForm,\n    handleAddress,\n    handleDateInterval\n  };\n}\n"]},"metadata":{},"sourceType":"module"}