{"ast":null,"code":"import _slicedToArray from \"C:/projects/gazprom/formApplication/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/projects/gazprom/formApplication/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport useComplexForm from '@/compositions/useComplexForm';\nimport Alert from '@/components/Alert';\nimport { useStore } from 'vuex';\nimport AppDatePicker from \"@/core/AppDatePicker.vue\";\nimport AppLabel from \"@/core/AppLabel.vue\";\nimport AppInput from \"@/core/AppInput.vue\";\nimport AppSelect from \"@/core/AppSelect.vue\";\nimport store from \"@/store\";\nimport AppDateInterval from \"@/core/AppDateInterval.vue\";\nexport default {\n  data: function data() {\n    return {\n      accountOptions: [],\n      typeOptions: [],\n      verificationTypes: [],\n      reasonForSealingTypes: [],\n      counterPlaceTypes: [],\n      defectTypes: [],\n      applicationSubjectTypes: [],\n      debtPercentageTypes: [],\n      currentType: '',\n      sealingType: '',\n      defectType: ''\n    };\n  },\n  emits: ['selectFromSelect'],\n  created: function created() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var _yield$Promise$all, _yield$Promise$all2;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return Promise.all([store.dispatch('complexForm/getAccounts'), store.dispatch('complexForm/getRequestTypes'), store.dispatch('complexForm/getVerificationTypes'), store.dispatch('complexForm/getReasonForSealingTypes'), store.dispatch('complexForm/getCounterPlaceTypes'), store.dispatch('complexForm/getDefectTypes'), store.dispatch('complexForm/getSubjectApplicationTypes'), store.dispatch('complexForm/getDebtPercentageTypes')]);\n\n            case 3:\n              _yield$Promise$all = _context.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 8);\n              _this.accountOptions = _yield$Promise$all2[0];\n              _this.typeOptions = _yield$Promise$all2[1];\n              _this.verificationTypes = _yield$Promise$all2[2];\n              _this.reasonForSealingTypes = _yield$Promise$all2[3];\n              _this.counterPlaceTypes = _yield$Promise$all2[4];\n              _this.defectTypes = _yield$Promise$all2[5];\n              _this.applicationSubjectTypes = _yield$Promise$all2[6];\n              _this.debtPercentageTypes = _yield$Promise$all2[7];\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 15]]);\n    }))();\n  },\n  methods: {\n    GetSelectSelected: function GetSelectSelected(value) {\n      this.handleAddress(value);\n    },\n    GetTypeSelected: function GetTypeSelected(value) {\n      this.currentType = +value;\n    },\n    GetSealingTypes: function GetSealingTypes(value) {\n      this.sealingType = +value;\n    },\n    GetDefectType: function GetDefectType(value) {\n      this.defectType = +value;\n    },\n    dateUpdateHandler: function dateUpdateHandler(name, value) {\n      this.handleDateInterval(name, value);\n    }\n  },\n  setup: function setup() {\n    var initialValues = getInitVals();\n\n    var _useComplexForm = useComplexForm(initialValues, {\n      social: true\n    }),\n        onSubmit = _useComplexForm.onSubmit,\n        submitModal = _useComplexForm.submitModal,\n        loading = _useComplexForm.loading,\n        handleValidForm = _useComplexForm.handleValidForm,\n        handleAddress = _useComplexForm.handleAddress,\n        handleDateInterval = _useComplexForm.handleDateInterval;\n\n    var files = [];\n    return {\n      onSubmit: onSubmit,\n      submitModal: submitModal,\n      loading: loading,\n      handleValidForm: handleValidForm,\n      handleAddress: handleAddress,\n      files: files,\n      handleDateInterval: handleDateInterval\n    };\n  },\n  components: {\n    AppDateInterval: AppDateInterval,\n    AppSelect: AppSelect,\n    AppInput: AppInput,\n    AppLabel: AppLabel,\n    AppDatePicker: AppDatePicker,\n    Alert: Alert,\n    ComplexFormLayout: require('@/components/ComplexFormLayout').default,\n    ComplexFormToolbar: require('@/components/ComplexFormToolbar').default,\n    ComplexFormModal: require('@/components/ComplexFormModal').default\n  }\n};\n\nfunction getInitVals() {\n  return {\n    comment: '',\n    files: null,\n    agree: \"\",\n    emailme: \"\"\n  };\n}","map":{"version":3,"mappings":"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","names":["useComplexForm","Alert","useStore","AppDatePicker","AppLabel","AppInput","AppSelect","store","AppDateInterval","data","accountOptions","typeOptions","verificationTypes","reasonForSealingTypes","counterPlaceTypes","defectTypes","applicationSubjectTypes","debtPercentageTypes","currentType","sealingType","defectType","emits","created","Promise","all","dispatch","console","error","methods","GetSelectSelected","value","handleAddress","GetTypeSelected","GetSealingTypes","GetDefectType","dateUpdateHandler","name","handleDateInterval","setup","initialValues","getInitVals","social","onSubmit","submitModal","loading","handleValidForm","files","components","ComplexFormLayout","require","default","ComplexFormToolbar","ComplexFormModal","comment","agree","emailme"],"sourceRoot":"","sources":["C:\\projects\\gazprom\\formApplication\\src\\components\\EmptyForm.vue"],"sourcesContent":["<template>\n  <div>\n    <form>\n      <AppFieldset>\n        <Alert>Перед заполнением формы заявления убедитесь в том, что лицевой счет привязан к данной учетной записи!<br><br>Обращаем Ваше внимание на то, что подача онлайн-заявления потребует его подписания с помощью мобильного приложения Госключ!</Alert>\n        <AppInput name=\"uploaded_files\" type=\"hidden\" />\n        <AppSelect\n            name=\"type\"\n            rules=\"required\"\n            label=\"Тип заявки\"\n            :options=\"typeOptions\"\n            @selectFromSelect=\"GetTypeSelected\"\n        />\n        <AppInput name=\"last_name\" rules=\"required\" label=\"Фамилия\" />\n        <AppInput name=\"name\" rules=\"required\" label=\"Имя\" />\n        <AppInput name=\"second_name\" label=\"Отчество\" />\n        <AppInput name=\"snils\" rules=\"required\" label=\"СНИЛС\" v-maska=\"'###-###-###-##'\"/>\n        <AppInput type=\"tel\" name=\"phone\" rules=\"required\" label=\"Телефон\" />\n        <AppInput type=\"email\" name=\"email\" rules=\"required|email\" label=\"Электронная почта\" />\n        <AppSelect\n            name=\"account\"\n            rules=\"required\"\n            label=\"Номер лицевого счета\"\n            :options=\"accountOptions\"\n            infomessage=\"Необходимо привязать хотя бы один лицевой счет\"\n            @selectFromSelect=\"GetSelectSelected\"\n        />\n        <AppInput type=\"text\" name=\"address\" rules=\"required\" label=\"Адрес\"/>\n        <template v-if=\"currentType === 1\">\n          <AppInput type=\"textarea\" name=\"comment\" rules=\"required\" label=\"Текст заявления\" />\n        </template>\n        <template v-if=\"currentType === 2\">\n          <AppDateInterval\n              label=\"Период расчетов\"\n              name=\"period\"\n              rules=\"required\"\n          />\n        </template>\n        <template v-if=\"currentType === 3\">\n          <AppInput type=\"text\" name=\"device_name\" rules=\"required\" label=\"Наименование прибора учета газа\" />\n          <AppInput type=\"number\" name=\"device_indication\" rules=\"required\" label=\"Показание\"/>\n        </template>\n        <template v-if=\"currentType === 4\">\n          <AppInput type=\"textarea\" name=\"derection_target\" rules=\"required\" label=\"Цель направления контролера\" />\n        </template>\n        <template v-if=\"currentType === 5\">\n          <AppInput type=\"text\" name=\"org_name\" rules=\"required\" label=\"Наименование организации поверителя\" />\n          <AppDatePicker name=\"verification_end\" rules=\"required\" label=\"Дата истечения срока поверки\" />\n          <AppSelect\n              name=\"verification\"\n              rules=\"required\"\n              label=\"Поверка проведена\"\n              :options=\"verificationTypes\"\n              infomessage=\"Необходимо выбрать время проведение поверки\"\n          />\n        </template>\n        <template v-if=\"currentType === 6\">\n          <AppDateInterval\n              label=\"Период приостановки начислений за сетевой газ\"\n              name=\"stop\"\n              rules=\"required\"\n              @updateDate=\"dateUpdateHandler\"\n          />\n          <AppInput type=\"number\" name=\"device_current_indication\" rules=\"required\" label=\"Текущие показания (м3)\"/>\n        </template>\n        <template v-if=\"currentType === 7\">\n          <AppSelect\n              name=\"sealing\"\n              rules=\"required\"\n              label=\"Причина опломбировки\"\n              :options=\"reasonForSealingTypes\"\n              infomessage=\"Необходимо выбрать причину опломбировки\"\n              @selectFromSelect=\"GetSealingTypes\"\n          />\n          <AppInput v-if=\"sealingType === 5\" type=\"text\" name=\"reason_sealing\" rules=\"required\" label=\"Причина повреждения\"/>\n          <AppSelect\n              name=\"counter_place\"\n              rules=\"required\"\n              label=\"Место установки счетчика\"\n              :options=\"counterPlaceTypes\"\n              infomessage=\"Необходимо выбрать место установки счетчика\"\n          />\n        </template>\n        <template v-if=\"currentType === 8\">\n          <AppDatePicker name=\"defect_date\" rules=\"required\" label=\"Дата выявления неисправности ПУГ (счетчика газа)\" />\n          <AppSelect\n              name=\"defect_type\"\n              rules=\"required\"\n              label=\"Характер неисправности ПУГ\"\n              :options=\"defectTypes\"\n              infomessage=\"Необходимо выбрать характер неисправности ПУГ\"\n              @selectFromSelect=\"GetDefectType\"\n          />\n          <AppInput v-if=\"defectType === 4\" type=\"textarea\" name=\"defect_type_comment\" rules=\"required\" label=\"Описание характера неисправности ПУГ\"/>\n        </template>\n        <template v-if=\"currentType === 9\">\n          <AppInput type=\"number\" name=\"debt_amount\" rules=\"required\" label=\"Размер задолженности на текущую дату (рублей)\"/>\n          <AppDatePicker class=\"sm:tw-col-span-3\" name=\"amortization_date\" rules=\"required\" label=\"Дата погашения долга\" />\n          <AppDatePicker class=\"sm:tw-col-span-3\" name=\"payment_date\" rules=\"required\" label=\"Дата оплаты стоимости услуг по ограничению и возобновлению поставки газа\" />\n          <AppDateInterval\n              label=\"Период подключения к газопроводу\"\n              name=\"connection\"\n              rules=\"required\"\n              @updateDate=\"dateUpdateHandler\"\n          />\n        </template>\n        <template v-if=\"currentType === 10\">\n          <AppInput type=\"number\" name=\"debt_amount\" rules=\"required\" label=\"Размер задолженности на текущую дату (рублей)\"/>\n          <AppSelect\n              name=\"counterPlace\"\n              rules=\"required\"\n              label=\"Предмет заявления\"\n              :options=\"applicationSubjectTypes\"\n              infomessage=\"Необходимо выбрать характер неисправности ПУГ\"\n          />\n          <AppSelect\n              name=\"debt_percentage\"\n              rules=\"required\"\n              label=\"К погашению на 1 этапе (до подписания Соглашения о рассрочке), % долга:\"\n              :options=\"debtPercentageTypes\"\n              infomessage=\"Необходимо заполнить это поле\"\n          />\n          <AppInput type=\"number\" name=\"debt_months\" rules=\"required\" label=\"Количество месяцев рассрочки для оставшейся части долга\"/>\n        </template>\n        <AppFile :filename=\"files\" name=\"files\" label=\"Вложения\" accept=\".jpg,.jpeg,.png,.doc,.docx,.pdf\" multiple />\n        <AppCheck name=\"agree\" label=\"Разъяснения получены, на необходимые перерасчеты согласен\" rules=\"required\" value=\"yes\"/>\n        <AppCheck name=\"emailme\" label=\"Прошу направлять счет-извещения по указанному в данном заявлении адресу электронной почты\" value=\"yes\"/>\n      </AppFieldset>\n      <br>\n      <hr>\n      <ComplexFormToolbar @submit=\"onSubmit\" @showModal=\"submitModal = true\" @handleValidForm=\"handleValidForm\"/>\n    </form>\n    <AppModal v-model=\"submitModal\">\n      <ComplexFormModal @submit=\"onSubmit\" @hideModal=\"submitModal = false\" />\n    </AppModal>\n    <AppLoading :showing=\"loading\" />\n  </div>\n</template>\n\n<script>\nimport useComplexForm from '@/compositions/useComplexForm';\nimport Alert from '@/components/Alert';\nimport { useStore } from 'vuex';\nimport AppDatePicker from \"@/core/AppDatePicker.vue\";\nimport AppLabel from \"@/core/AppLabel.vue\";\nimport AppInput from \"@/core/AppInput.vue\";\nimport AppSelect from \"@/core/AppSelect.vue\";\nimport store from \"@/store\";\nimport AppDateInterval from \"@/core/AppDateInterval.vue\";\n\nexport default {\n  data(){\n    return {\n      accountOptions: [],\n      typeOptions: [],\n      verificationTypes: [],\n      reasonForSealingTypes: [],\n      counterPlaceTypes: [],\n      defectTypes: [],\n      applicationSubjectTypes: [],\n      debtPercentageTypes: [],\n      currentType: '',\n      sealingType: '',\n      defectType: '',\n    }\n  },\n  emits: ['selectFromSelect'],\n  async created() {\n    try {\n      [\n        this.accountOptions,\n        this.typeOptions,\n        this.verificationTypes,\n        this.reasonForSealingTypes,\n        this.counterPlaceTypes,\n        this.defectTypes,\n        this.applicationSubjectTypes,\n        this.debtPercentageTypes\n      ] = await Promise.all(\n          [\n            store.dispatch('complexForm/getAccounts'),\n            store.dispatch('complexForm/getRequestTypes'),\n            store.dispatch('complexForm/getVerificationTypes'),\n            store.dispatch('complexForm/getReasonForSealingTypes'),\n            store.dispatch('complexForm/getCounterPlaceTypes'),\n            store.dispatch('complexForm/getDefectTypes'),\n            store.dispatch('complexForm/getSubjectApplicationTypes'),\n            store.dispatch('complexForm/getDebtPercentageTypes')\n      ])\n\n    } catch (e){\n      console.error(e)\n    }\n  },\n  methods: {\n      GetSelectSelected(value) {\n        this.handleAddress(value);\n      },\n      GetTypeSelected(value){\n        this.currentType = +value\n      },\n      GetSealingTypes(value){\n        this.sealingType = +value\n      },\n      GetDefectType(value){\n        this.defectType = +value\n      },\n      dateUpdateHandler(name, value) {\n        this.handleDateInterval(name, value)\n      }\n  },\n  setup() {\n    const initialValues = getInitVals();\n    const { onSubmit, submitModal, loading, handleValidForm, handleAddress, handleDateInterval} = useComplexForm(initialValues, { social: true });\n    const files = [];\n\n    return {\n        onSubmit,\n        submitModal,\n        loading,\n        handleValidForm,\n        handleAddress,\n        files,\n        handleDateInterval\n    };\n  },\n  components: {\n    AppDateInterval,\n    AppSelect,\n    AppInput,\n    AppLabel,\n    AppDatePicker,\n    Alert,\n    ComplexFormLayout: require('@/components/ComplexFormLayout').default,\n    ComplexFormToolbar: require('@/components/ComplexFormToolbar').default,\n    ComplexFormModal: require('@/components/ComplexFormModal').default,\n  },\n};\n\nfunction getInitVals() {\n\n\n\n  return {\n    comment: '',\n    files: null,\n    agree: \"\",\n    emailme: \"\"\n\n  };\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}